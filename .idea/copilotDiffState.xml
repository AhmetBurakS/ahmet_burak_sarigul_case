<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/configuration.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/configuration.properties" />
              <option name="originalContent" value="browser=chrome&#10;BaseURL=https://useinsider.com/&#10;URL=https://useinsider.com/careers/quality-assurance/&#10;URL2=https://useinsider.com/careers/open-positions/?department=qualityassurance&#10;&#10;# Test Data Constants&#10;qa.department=Quality Assurance&#10;istanbul.location=Istanbul, Turkey&#10;insider.title=Insider&#10;careers.title=Careers&#10;qa.page.title=quality assurance&#10;open.positions.title=Insider Open Positions | Insider&#10;lever.url=https://jobs.lever.co/useinsider/&#10;&#10;# Wait Times&#10;wait.default=3&#10;wait.page.load=10" />
              <option name="updatedContent" value="browser=chrome&#10;BaseURL=https://useinsider.com/&#10;URL=https://useinsider.com/careers/quality-assurance/&#10;URL2=https://useinsider.com/careers/open-positions/?department=qualityassurance&#10;&#10;# Test Data Constants&#10;qa.department=Quality Assurance&#10;istanbul.location=Istanbul, Turkey&#10;insider.title=Insider&#10;careers.title=Careers&#10;qa.page.title=quality assurance&#10;open.positions.title=Insider Open Positions | Insider&#10;lever.url=https://jobs.lever.co/useinsider/&#10;&#10;# Wait Times&#10;wait.default=3&#10;wait.page.load=10" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/tests/BaseTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/tests/BaseTest.java" />
              <option name="originalContent" value="package tests;&#10;&#10;import io.qameta.allure.Step;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.testng.annotations.AfterMethod;&#10;import org.testng.annotations.BeforeMethod;&#10;import pages.*;&#10;import utilities.ConfigReader;&#10;import utilities.Driver;&#10;import utilities.ReusableMethods;&#10;&#10;public class BaseTest {&#10;&#10;    protected static final Logger logger = LogManager.getLogger(BaseTest.class);&#10;    protected HomePage homePage;&#10;    protected CareersPage careersPage;&#10;    protected QualityAssurancePage qualityAssurancePage;&#10;    protected AllOpenPositionsPage allOpenPositionsPage;&#10;    protected LeverApplicationFormPage leverApplicationFormPage;&#10;&#10;    @BeforeMethod&#10;    @Step(&quot;Test ortamı hazırlanıyor&quot;)&#10;    public void setUp() {&#10;        try {&#10;            logger.info(&quot; Test başlatılıyor...&quot;);&#10;            Driver.getDriver().get(ConfigReader.getProperty(&quot;BaseURL&quot;));&#10;            logger.info(&quot;✓ Tarayıcı başlatıldı ve URL açıldı&quot;);&#10;            initializePageObjects();&#10;            ReusableMethods.acceptCookies(homePage);&#10;            ReusableMethods.waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;            logger.info(&quot;✅ Test ortamı hazırlandı&quot;);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;❌ Test ortamı hazırlanırken hata: &quot; + e.getMessage());&#10;            try {&#10;                if (Driver.getDriver() != null) {&#10;                    Driver.closeDriver();&#10;                }&#10;            } catch (Exception cleanupException) {&#10;                logger.error(&quot;Driver cleanup sırasında hata: &quot; + cleanupException.getMessage());&#10;            }&#10;            throw new RuntimeException(&quot;Test setup başarısız: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;&#10;    private void initializePageObjects() {&#10;        homePage = new HomePage();&#10;        careersPage = new CareersPage();&#10;        qualityAssurancePage = new QualityAssurancePage();&#10;        allOpenPositionsPage = new AllOpenPositionsPage();&#10;        leverApplicationFormPage = new LeverApplicationFormPage();&#10;    }&#10;&#10;    @AfterMethod&#10;    @Step(&quot;Test ortamı temizleniyor&quot;)&#10;    public void tearDown() {&#10;        logger.info(&quot; Test temizleniyor...&quot;);&#10;&#10;        if (Driver.getDriver() != null) {&#10;            Driver.closeDriver();&#10;            logger.info(&quot;✓ Tarayıcı kapatıldı&quot;);&#10;        }&#10;&#10;        logger.info(&quot;✅ Test tamamlandı&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package tests;&#10;&#10;import io.qameta.allure.Step;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.testng.annotations.AfterMethod;&#10;import org.testng.annotations.BeforeMethod;&#10;import pages.*;&#10;import utilities.ConfigReader;&#10;import utilities.Driver;&#10;import utilities.ReusableMethods;&#10;&#10;public class BaseTest {&#10;&#10;    protected static final Logger logger = LogManager.getLogger(BaseTest.class);&#10;    protected HomePage homePage;&#10;    protected CareersPage careersPage;&#10;    protected QualityAssurancePage qualityAssurancePage;&#10;    protected AllOpenPositionsPage allOpenPositionsPage;&#10;    protected LeverApplicationFormPage leverApplicationFormPage;&#10;&#10;    @BeforeMethod&#10;    @Step(&quot;Test ortamı hazırlanıyor&quot;)&#10;    public void setUp() {&#10;        try {&#10;            logger.info(&quot; Test başlatılıyor...&quot;);&#10;            Driver.getDriver().get(ConfigReader.getProperty(&quot;BaseURL&quot;));&#10;            logger.info(&quot;✓ Tarayıcı başlatıldı ve URL açıldı&quot;);&#10;            initializePageObjects();&#10;            ReusableMethods.acceptCookies(homePage);&#10;            ReusableMethods.waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;            logger.info(&quot;✅ Test ortamı hazırlandı&quot;);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;❌ Test ortamı hazırlanırken hata: &quot; + e.getMessage());&#10;            try {&#10;                if (Driver.getDriver() != null) {&#10;                    Driver.closeDriver();&#10;                }&#10;            } catch (Exception cleanupException) {&#10;                logger.error(&quot;Driver cleanup sırasında hata: &quot; + cleanupException.getMessage());&#10;            }&#10;            throw new RuntimeException(&quot;Test setup başarısız: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;&#10;    private void initializePageObjects() {&#10;        homePage = new HomePage();&#10;        careersPage = new CareersPage();&#10;        qualityAssurancePage = new QualityAssurancePage();&#10;        allOpenPositionsPage = new AllOpenPositionsPage();&#10;        leverApplicationFormPage = new LeverApplicationFormPage();&#10;    }&#10;&#10;    @AfterMethod&#10;    @Step(&quot;Test ortamı temizleniyor&quot;)&#10;    public void tearDown() {&#10;        logger.info(&quot; Test temizleniyor...&quot;);&#10;&#10;        if (Driver.getDriver() != null) {&#10;            Driver.closeDriver();&#10;            logger.info(&quot;✓ Tarayıcı kapatıldı&quot;);&#10;        }&#10;&#10;        logger.info(&quot;✅ Test tamamlandı&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/utilities/ReusableMethods.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/utilities/ReusableMethods.java" />
              <option name="originalContent" value="package utilities;&#10;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.ui.WebDriverWait;&#10;import org.openqa.selenium.support.ui.ExpectedConditions;&#10;import org.openqa.selenium.interactions.Actions;&#10;import org.openqa.selenium.JavascriptExecutor;&#10;import org.testng.Assert;&#10;import org.testng.AssertJUnit;&#10;import pages.*;&#10;import java.time.Duration;&#10;import java.util.Set;&#10;&#10;public class ReusableMethods {&#10;&#10;    private static final Logger logger = LogManager.getLogger(ReusableMethods.class);&#10;&#10;    // Basic utility methods&#10;    public static void wait(int seconds) {&#10;        try {&#10;            Thread.sleep(seconds * 1000);&#10;        } catch (InterruptedException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public static void waitForPageToLoad(int seconds) {&#10;        wait(seconds);&#10;    }&#10;&#10;    public static void waitForVisibility(WebElement element, int timeoutInSeconds) {&#10;        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeoutInSeconds));&#10;        wait.until(ExpectedConditions.visibilityOf(element));&#10;    }&#10;&#10;    public static void waitForClickability(WebElement element, int timeoutInSeconds) {&#10;        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeoutInSeconds));&#10;        wait.until(ExpectedConditions.elementToBeClickable(element));&#10;    }&#10;&#10;    public static void scrollToElement(WebElement element) {&#10;        JavascriptExecutor js = (JavascriptExecutor) Driver.getDriver();&#10;        js.executeScript(&quot;arguments[0].scrollIntoView(true);&quot;, element);&#10;    }&#10;&#10;    public static void hover(WebElement element) {&#10;        Actions actions = new Actions(Driver.getDriver());&#10;        actions.moveToElement(element).perform();&#10;    }&#10;&#10;    public static void switchToNewWindow(String originalWindow) {&#10;        Set&lt;String&gt; allWindows = Driver.getDriver().getWindowHandles();&#10;        for (String windowHandle : allWindows) {&#10;            if (!windowHandle.equals(originalWindow)) {&#10;                Driver.getDriver().switchTo().window(windowHandle);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    public static void acceptCookies(HomePage homePage) {&#10;        try {&#10;            waitForVisibility(homePage.acceptAllCookiesButton, 5);&#10;            homePage.acceptAllCookiesButton.click();&#10;            logger.info(&quot;✓ Cookies accepted&quot;);&#10;        } catch (Exception e) {&#10;            logger.info(&quot;✓ Cookie banner not present or already accepted&quot;);&#10;        }&#10;    }&#10;&#10;    // Assertion methods&#10;    public static void assertPageTitle(String expectedTitle) {&#10;        String actualTitle = Driver.getDriver().getTitle();&#10;        Assert.assertTrue(actualTitle.contains(expectedTitle),&#10;                &quot;Page title should contain '&quot; + expectedTitle + &quot;'. Actual: &quot; + actualTitle);&#10;    }&#10;&#10;    public static void assertPageURL(String expectedURL) {&#10;        String actualURL = Driver.getDriver().getCurrentUrl();&#10;        Assert.assertTrue(actualURL.contains(expectedURL),&#10;                &quot;Page URL should contain '&quot; + expectedURL + &quot;'. Actual: &quot; + actualURL);&#10;    }&#10;&#10;    public static void assertElementDisplayed(WebElement element, String elementName) {&#10;        Assert.assertTrue(element.isDisplayed(), elementName + &quot; should be displayed&quot;);&#10;    }&#10;&#10;    public static void verifyLocationsSectionAfterClicks(WebElement locationsSection2, WebElement rightSide, int clickCount) {&#10;        for (int i = 0; i &lt; clickCount; i++) {&#10;            rightSide.click();&#10;            wait(1);&#10;        }&#10;    }&#10;&#10;    // Test Case 1: Homepage verification&#10;    public static void verifyInsiderHomePage(HomePage homePage) {&#10;        // Verify page title contains &quot;Insider&quot;&#10;        logger.info(&quot;Verifying page title contains 'Insider'...&quot;);&#10;        assertPageTitle(ConfigReader.getProperty(&quot;insider.title&quot;));&#10;        logger.info(&quot;✓ Page title verification successful&quot;);&#10;&#10;        // Verify page URL contains &quot;useinsider.com&quot;&#10;        logger.info(&quot;Verifying page URL contains 'useinsider.com'...&quot;);&#10;        assertPageURL(&quot;useinsider.com&quot;);&#10;        logger.info(&quot;✓ Page URL verification successful&quot;);&#10;&#10;        // Verify main page elements are displayed&#10;        logger.info(&quot;Verifying main page elements are displayed...&quot;);&#10;        verifyHomePageElements(homePage);&#10;    }&#10;&#10;    private static void verifyHomePageElements(HomePage homePage) {&#10;        assertElementDisplayed(homePage.navigationBar, &quot;Navigation Bar&quot;);&#10;        logger.info(&quot;✓ Navigation Bar is displayed&quot;);&#10;&#10;        assertElementDisplayed(homePage.companyDropdownMenu, &quot;Company Dropdown Menu&quot;);&#10;        logger.info(&quot;✓ Company Dropdown Menu is displayed&quot;);&#10;    }&#10;&#10;    // Test Case 2: Careers page verification&#10;    public static void navigateAndVerifyCareersPage(HomePage homePage, CareersPage careersPage) {&#10;        // Navigate to Careers page&#10;        navigateToCareersPage(homePage);&#10;&#10;        // Verify Careers page URL and title&#10;        verifyCareersPageDetails();&#10;&#10;        // Verify page sections&#10;        verifyCareersPageSections(careersPage);&#10;    }&#10;&#10;    private static void navigateToCareersPage(HomePage homePage) {&#10;        logger.info(&quot;Navigating to Careers page...&quot;);&#10;        homePage.companyMenu.click();&#10;        logger.info(&quot;✓ Company menu clicked&quot;);&#10;&#10;        homePage.Careers.click();&#10;        logger.info(&quot;✓ Careers menu clicked&quot;);&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;    }&#10;&#10;    private static void verifyCareersPageDetails() {&#10;        logger.info(&quot;Verifying Careers page URL and title...&quot;);&#10;        assertPageURL(&quot;useinsider.com/careers/&quot;);&#10;        logger.info(&quot;✓ Careers page URL verification successful&quot;);&#10;&#10;        assertPageTitle(ConfigReader.getProperty(&quot;careers.title&quot;));&#10;        logger.info(&quot;✓ Careers page title verification successful&quot;);&#10;    }&#10;&#10;    private static void verifyCareersPageSections(CareersPage careersPage) {&#10;        verifyTeamsSections(careersPage);&#10;        verifyLocationsSections(careersPage);&#10;        verifyLifeAtInsiderSection(careersPage);&#10;    }&#10;&#10;    private static void verifyTeamsSections(CareersPage careersPage) {&#10;        logger.info(&quot;Verifying Teams sections are displayed...&quot;);&#10;        scrollToElement(careersPage.teamsSection1);&#10;&#10;        assertElementDisplayed(careersPage.teamsSection1, &quot;Teams Section 1&quot;);&#10;        logger.info(&quot;✓ Teams Section 1 is displayed&quot;);&#10;&#10;        assertElementDisplayed(careersPage.teamsSection2, &quot;Teams Section 2&quot;);&#10;        logger.info(&quot;✓ Teams Section 2 is displayed&quot;);&#10;&#10;        assertElementDisplayed(careersPage.teamsSection3, &quot;Teams Section 3&quot;);&#10;        logger.info(&quot;✓ Teams Section 3 is displayed&quot;);&#10;&#10;        assertElementDisplayed(careersPage.seeAllTeamsButton, &quot;See All Teams Button&quot;);&#10;        logger.info(&quot;✓ See All Teams Button is displayed&quot;);&#10;    }&#10;&#10;    private static void verifyLocationsSections(CareersPage careersPage) {&#10;        logger.info(&quot;Verifying Locations sections are displayed...&quot;);&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;&#10;        scrollToElement(careersPage.locationsSection1);&#10;        assertElementDisplayed(careersPage.locationsSection1, &quot;Locations Section 1&quot;);&#10;        logger.info(&quot;✓ Locations Section 1 is displayed&quot;);&#10;&#10;        scrollToElement(careersPage.rightSide);&#10;        verifyLocationsSectionAfterClicks(careersPage.locationsSection2, careersPage.rightSide, 3);&#10;        assertElementDisplayed(careersPage.locationsSection2, &quot;Locations Section 2&quot;);&#10;        logger.info(&quot;✓ Locations Section 2 is displayed&quot;);&#10;    }&#10;&#10;    private static void verifyLifeAtInsiderSection(CareersPage careersPage) {&#10;        logger.info(&quot;Verifying Life at Insider section is displayed...&quot;);&#10;        scrollToElement(careersPage.lifeAtInsiderSection);&#10;&#10;        assertElementDisplayed(careersPage.lifeAtInsiderSection, &quot;Life at Insider Section&quot;);&#10;        logger.info(&quot;✓ Life at Insider Section is displayed&quot;);&#10;    }&#10;&#10;    // Test Case 3: QA jobs filtering&#10;    public static void navigateAndFilterQAJobs(QualityAssurancePage qualityAssurancePage, AllOpenPositionsPage allOpenPositionsPage) {&#10;        // Navigate to Quality Assurance page&#10;        navigateToQAPage();&#10;&#10;        // Click &quot;See all QA jobs&quot; button&#10;        clickSeeAllQAJobsButton(qualityAssurancePage);&#10;&#10;        // Apply location filter&#10;        applyIstanbulLocationFilter(allOpenPositionsPage);&#10;&#10;        // Verify job list&#10;        verifyJobListPresence(allOpenPositionsPage);&#10;    }&#10;&#10;    private static void navigateToQAPage() {&#10;        logger.info(&quot;Navigating to QA page...&quot;);&#10;        Driver.getDriver().get(ConfigReader.getProperty(&quot;URL&quot;));&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        assertPageURL(&quot;useinsider.com/careers/quality-assurance/&quot;);&#10;        assertPageTitle(ConfigReader.getProperty(&quot;qa.page.title&quot;));&#10;        logger.info(&quot;✓ QA page is successfully opened and verified&quot;);&#10;    }&#10;&#10;    private static void clickSeeAllQAJobsButton(QualityAssurancePage qualityAssurancePage) {&#10;        qualityAssurancePage.seeAllQAJobsButton.click();&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        assertPageURL(ConfigReader.getProperty(&quot;URL2&quot;));&#10;        assertPageTitle(ConfigReader.getProperty(&quot;open.positions.title&quot;));&#10;        logger.info(&quot;✓ 'See all QA jobs' button is clicked and All Open Positions page is successfully opened and verified&quot;);&#10;    }&#10;&#10;    private static void applyIstanbulLocationFilter(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Applying location filter for Istanbul, Turkey...&quot;);&#10;        int defaultWait = Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;));&#10;&#10;        wait(defaultWait);&#10;        allOpenPositionsPage.removeAllItemsFilterByLocationDropdownMenu.click();&#10;        logger.info(&quot;✓ Existing location filters removed&quot;);&#10;&#10;        wait(defaultWait);&#10;        allOpenPositionsPage.filterByLocationDropdownMenu.click();&#10;        wait(defaultWait);&#10;        allOpenPositionsPage.filterByLocationDropdownMenu.click();&#10;        logger.info(&quot;✓ Location dropdown opened&quot;);&#10;&#10;        wait(defaultWait);&#10;        scrollToElement(allOpenPositionsPage.istanbulTurkiye);&#10;        wait(defaultWait);&#10;        allOpenPositionsPage.istanbulTurkiye.click();&#10;        logger.info(&quot;✓ Istanbul, Turkey location selected&quot;);&#10;    }&#10;&#10;    private static void verifyJobListPresence(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Verifying job list is displayed...&quot;);&#10;        scrollToElement(allOpenPositionsPage.jobCard);&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;        assertElementDisplayed(allOpenPositionsPage.jobCard, &quot;Job Card&quot;);&#10;        logger.info(&quot;✓ Jobs are successfully filtered by Location: 'Istanbul, Turkey' and Department: 'Quality Assurance' and job list is displayed&quot;);&#10;    }&#10;&#10;    // Test Case 4: Job details verification&#10;    public static void verifyJobDetailsContent(AllOpenPositionsPage allOpenPositionsPage) {&#10;        // Navigate to Open Positions page and apply filter&#10;        navigateToOpenPositionsAndFilter(allOpenPositionsPage);&#10;&#10;        // Verify job details (recursive call kaldırıldı)&#10;        verifyJobDetailsContentInternal(allOpenPositionsPage);&#10;    }&#10;&#10;    private static void navigateToOpenPositionsAndFilter(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Navigating to All Open Positions page...&quot;);&#10;        Driver.getDriver().get(ConfigReader.getProperty(&quot;URL2&quot;));&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        logger.info(&quot;✓ All Open Positions page loaded&quot;);&#10;&#10;        applyIstanbulLocationFilter(allOpenPositionsPage);&#10;&#10;        logger.info(&quot;Preparing job card for verification...&quot;);&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;        scrollToElement(allOpenPositionsPage.jobCard);&#10;        waitForVisibility(allOpenPositionsPage.jobCard, Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        assertElementDisplayed(allOpenPositionsPage.jobCard, &quot;Job Card&quot;);&#10;        logger.info(&quot;✓ Job card is displayed and ready for verification&quot;);&#10;    }&#10;&#10;    private static void verifyJobDetailsContentInternal(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Verifying job details content...&quot;);&#10;        String qaDepartment = ConfigReader.getProperty(&quot;qa.department&quot;);&#10;&#10;        // Get text content from job details&#10;        String positionText = allOpenPositionsPage.position.getText();&#10;        String departmentText = allOpenPositionsPage.department.getText();&#10;        String locationText = allOpenPositionsPage.location.getText();&#10;&#10;        // Verify Position contains &quot;Quality Assurance&quot;&#10;        Assert.assertTrue(positionText.contains(qaDepartment),&#10;                &quot;Position should contain '&quot; + qaDepartment + &quot;'. Actual: &quot; + positionText);&#10;        logger.info(&quot;✓ Position contains '&quot; + qaDepartment + &quot;': &quot; + positionText);&#10;&#10;        // Verify Department contains &quot;Quality Assurance&quot;&#10;        Assert.assertTrue(departmentText.contains(qaDepartment),&#10;                &quot;Department should contain '&quot; + qaDepartment + &quot;'. Actual: &quot; + departmentText);&#10;        logger.info(&quot;✓ Department contains '&quot; + qaDepartment + &quot;': &quot; + departmentText);&#10;&#10;        // Verify Location contains &quot;Istanbul, Turkiye&quot;&#10;        Assert.assertTrue(locationText.contains(&quot;Istanbul, Turkiye&quot;),&#10;                &quot;Location should contain 'Istanbul, Turkiye'. Actual: &quot; + locationText);&#10;        logger.info(&quot;✓ Location contains 'Istanbul, Turkiye': &quot; + locationText);&#10;&#10;        logger.info(&quot;✓ All job details verified successfully&quot;);&#10;    }&#10;&#10;&#10;    // Test Case 5: Lever application redirect&#10;    public static void verifyLeverApplicationRedirect(AllOpenPositionsPage allOpenPositionsPage, LeverApplicationFormPage leverApplicationFormPage) {&#10;        // Navigate and prepare for View Role button click&#10;        prepareForViewRoleClick(allOpenPositionsPage);&#10;&#10;        // Click View Role and verify redirect&#10;        clickViewRoleAndVerifyRedirect(allOpenPositionsPage, leverApplicationFormPage);&#10;    }&#10;&#10;    private static void prepareForViewRoleClick(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Navigating to All Open Positions page...&quot;);&#10;        Driver.getDriver().get(ConfigReader.getProperty(&quot;URL2&quot;));&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        logger.info(&quot;✓ All Open Positions page loaded&quot;);&#10;&#10;        applyIstanbulLocationFilter(allOpenPositionsPage);&#10;&#10;        logger.info(&quot;Preparing to click View Role button...&quot;);&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;        scrollToElement(allOpenPositionsPage.jobCard);&#10;        hover(allOpenPositionsPage.jobCard);&#10;        logger.info(&quot;✓ Hovered over job card to reveal View Role button&quot;);&#10;&#10;        waitForClickability(allOpenPositionsPage.viewRoleButton, Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;    }&#10;&#10;    private static void clickViewRoleAndVerifyRedirect(AllOpenPositionsPage allOpenPositionsPage, LeverApplicationFormPage leverApplicationFormPage) {&#10;        // Save current window handle&#10;        String originalWindow = Driver.getDriver().getWindowHandle();&#10;        logger.info(&quot;✓ Original window handle saved&quot;);&#10;&#10;        // Click View Role button&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;        allOpenPositionsPage.viewRoleButton.click();&#10;        logger.info(&quot;✓ View Role button clicked&quot;);&#10;&#10;        // Switch to new window and verify&#10;        logger.info(&quot;Switching to new window...&quot;);&#10;        switchToNewWindow(originalWindow);&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        logger.info(&quot;✓ Successfully switched to new window&quot;);&#10;&#10;        // Verify Lever Application page&#10;        verifyLeverApplicationPage(leverApplicationFormPage);&#10;    }&#10;&#10;    private static void verifyLeverApplicationPage(LeverApplicationFormPage leverApplicationFormPage) {&#10;        logger.info(&quot;Verifying Lever Application page...&quot;);&#10;        assertPageURL(ConfigReader.getProperty(&quot;lever.url&quot;));&#10;        logger.info(&quot;✓ Lever Application page URL verification successful&quot;);&#10;&#10;        assertElementDisplayed(leverApplicationFormPage.applyForThisJobButton, &quot;Apply for this job button&quot;);&#10;        logger.info(&quot;✓ Apply for this job button is displayed and verified&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package utilities;&#10;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.ui.WebDriverWait;&#10;import org.openqa.selenium.support.ui.ExpectedConditions;&#10;import org.openqa.selenium.interactions.Actions;&#10;import org.openqa.selenium.JavascriptExecutor;&#10;import org.testng.Assert;&#10;import org.testng.AssertJUnit;&#10;import pages.*;&#10;import java.time.Duration;&#10;import java.util.Set;&#10;&#10;public class ReusableMethods {&#10;&#10;    private static final Logger logger = LogManager.getLogger(ReusableMethods.class);&#10;&#10;    // Basic utility methods&#10;    public static void wait(int seconds) {&#10;        try {&#10;            Thread.sleep(seconds * 1000);&#10;        } catch (InterruptedException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public static void waitForPageToLoad(int seconds) {&#10;        wait(seconds);&#10;    }&#10;&#10;    public static void waitForVisibility(WebElement element, int timeoutInSeconds) {&#10;        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeoutInSeconds));&#10;        wait.until(ExpectedConditions.visibilityOf(element));&#10;    }&#10;&#10;    public static void waitForClickability(WebElement element, int timeoutInSeconds) {&#10;        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeoutInSeconds));&#10;        wait.until(ExpectedConditions.elementToBeClickable(element));&#10;    }&#10;&#10;    public static void scrollToElement(WebElement element) {&#10;        JavascriptExecutor js = (JavascriptExecutor) Driver.getDriver();&#10;        js.executeScript(&quot;arguments[0].scrollIntoView(true);&quot;, element);&#10;    }&#10;&#10;    public static void hover(WebElement element) {&#10;        Actions actions = new Actions(Driver.getDriver());&#10;        actions.moveToElement(element).perform();&#10;    }&#10;&#10;    public static void switchToNewWindow(String originalWindow) {&#10;        Set&lt;String&gt; allWindows = Driver.getDriver().getWindowHandles();&#10;        for (String windowHandle : allWindows) {&#10;            if (!windowHandle.equals(originalWindow)) {&#10;                Driver.getDriver().switchTo().window(windowHandle);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    public static void acceptCookies(HomePage homePage) {&#10;        try {&#10;            waitForVisibility(homePage.acceptAllCookiesButton, 5);&#10;            homePage.acceptAllCookiesButton.click();&#10;            logger.info(&quot;✓ Cookies accepted&quot;);&#10;        } catch (Exception e) {&#10;            logger.info(&quot;✓ Cookie banner not present or already accepted&quot;);&#10;        }&#10;    }&#10;&#10;    // Assertion methods&#10;    public static void assertPageTitle(String expectedTitle) {&#10;        String actualTitle = Driver.getDriver().getTitle();&#10;        Assert.assertTrue(actualTitle.contains(expectedTitle),&#10;                &quot;Page title should contain '&quot; + expectedTitle + &quot;'. Actual: &quot; + actualTitle);&#10;    }&#10;&#10;    public static void assertPageURL(String expectedURL) {&#10;        String actualURL = Driver.getDriver().getCurrentUrl();&#10;        Assert.assertTrue(actualURL.contains(expectedURL),&#10;                &quot;Page URL should contain '&quot; + expectedURL + &quot;'. Actual: &quot; + actualURL);&#10;    }&#10;&#10;    public static void assertElementDisplayed(WebElement element, String elementName) {&#10;        Assert.assertTrue(element.isDisplayed(), elementName + &quot; should be displayed&quot;);&#10;    }&#10;&#10;    public static void verifyLocationsSectionAfterClicks(WebElement locationsSection2, WebElement rightSide, int clickCount) {&#10;        for (int i = 0; i &lt; clickCount; i++) {&#10;            rightSide.click();&#10;            wait(1);&#10;        }&#10;    }&#10;&#10;    // Test Case 1: Homepage verification&#10;    public static void verifyInsiderHomePage(HomePage homePage) {&#10;        // Verify page title contains &quot;Insider&quot;&#10;        logger.info(&quot;Verifying page title contains 'Insider'...&quot;);&#10;        assertPageTitle(ConfigReader.getProperty(&quot;insider.title&quot;));&#10;        logger.info(&quot;✓ Page title verification successful&quot;);&#10;&#10;        // Verify page URL contains &quot;useinsider.com&quot;&#10;        logger.info(&quot;Verifying page URL contains 'useinsider.com'...&quot;);&#10;        assertPageURL(&quot;useinsider.com&quot;);&#10;        logger.info(&quot;✓ Page URL verification successful&quot;);&#10;&#10;        // Verify main page elements are displayed&#10;        logger.info(&quot;Verifying main page elements are displayed...&quot;);&#10;        verifyHomePageElements(homePage);&#10;    }&#10;&#10;    private static void verifyHomePageElements(HomePage homePage) {&#10;        assertElementDisplayed(homePage.navigationBar, &quot;Navigation Bar&quot;);&#10;        logger.info(&quot;✓ Navigation Bar is displayed&quot;);&#10;&#10;        assertElementDisplayed(homePage.companyDropdownMenu, &quot;Company Dropdown Menu&quot;);&#10;        logger.info(&quot;✓ Company Dropdown Menu is displayed&quot;);&#10;    }&#10;&#10;    // Test Case 2: Careers page verification&#10;    public static void navigateAndVerifyCareersPage(HomePage homePage, CareersPage careersPage) {&#10;        // Navigate to Careers page&#10;        navigateToCareersPage(homePage);&#10;&#10;        // Verify Careers page URL and title&#10;        verifyCareersPageDetails();&#10;&#10;        // Verify page sections&#10;        verifyCareersPageSections(careersPage);&#10;    }&#10;&#10;    private static void navigateToCareersPage(HomePage homePage) {&#10;        logger.info(&quot;Navigating to Careers page...&quot;);&#10;        homePage.companyMenu.click();&#10;        logger.info(&quot;✓ Company menu clicked&quot;);&#10;&#10;        homePage.Careers.click();&#10;        logger.info(&quot;✓ Careers menu clicked&quot;);&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;    }&#10;&#10;    private static void verifyCareersPageDetails() {&#10;        logger.info(&quot;Verifying Careers page URL and title...&quot;);&#10;        assertPageURL(&quot;useinsider.com/careers/&quot;);&#10;        logger.info(&quot;✓ Careers page URL verification successful&quot;);&#10;&#10;        assertPageTitle(ConfigReader.getProperty(&quot;careers.title&quot;));&#10;        logger.info(&quot;✓ Careers page title verification successful&quot;);&#10;    }&#10;&#10;    private static void verifyCareersPageSections(CareersPage careersPage) {&#10;        verifyTeamsSections(careersPage);&#10;        verifyLocationsSections(careersPage);&#10;        verifyLifeAtInsiderSection(careersPage);&#10;    }&#10;&#10;    private static void verifyTeamsSections(CareersPage careersPage) {&#10;        logger.info(&quot;Verifying Teams sections are displayed...&quot;);&#10;        scrollToElement(careersPage.teamsSection1);&#10;&#10;        assertElementDisplayed(careersPage.teamsSection1, &quot;Teams Section 1&quot;);&#10;        logger.info(&quot;✓ Teams Section 1 is displayed&quot;);&#10;&#10;        assertElementDisplayed(careersPage.teamsSection2, &quot;Teams Section 2&quot;);&#10;        logger.info(&quot;✓ Teams Section 2 is displayed&quot;);&#10;&#10;        assertElementDisplayed(careersPage.teamsSection3, &quot;Teams Section 3&quot;);&#10;        logger.info(&quot;✓ Teams Section 3 is displayed&quot;);&#10;&#10;        assertElementDisplayed(careersPage.seeAllTeamsButton, &quot;See All Teams Button&quot;);&#10;        logger.info(&quot;✓ See All Teams Button is displayed&quot;);&#10;    }&#10;&#10;    private static void verifyLocationsSections(CareersPage careersPage) {&#10;        logger.info(&quot;Verifying Locations sections are displayed...&quot;);&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;&#10;        scrollToElement(careersPage.locationsSection1);&#10;        assertElementDisplayed(careersPage.locationsSection1, &quot;Locations Section 1&quot;);&#10;        logger.info(&quot;✓ Locations Section 1 is displayed&quot;);&#10;&#10;        scrollToElement(careersPage.rightSide);&#10;        verifyLocationsSectionAfterClicks(careersPage.locationsSection2, careersPage.rightSide, 3);&#10;        assertElementDisplayed(careersPage.locationsSection2, &quot;Locations Section 2&quot;);&#10;        logger.info(&quot;✓ Locations Section 2 is displayed&quot;);&#10;    }&#10;&#10;    private static void verifyLifeAtInsiderSection(CareersPage careersPage) {&#10;        logger.info(&quot;Verifying Life at Insider section is displayed...&quot;);&#10;        scrollToElement(careersPage.lifeAtInsiderSection);&#10;&#10;        assertElementDisplayed(careersPage.lifeAtInsiderSection, &quot;Life at Insider Section&quot;);&#10;        logger.info(&quot;✓ Life at Insider Section is displayed&quot;);&#10;    }&#10;&#10;    // Test Case 3: QA jobs filtering&#10;    public static void navigateAndFilterQAJobs(QualityAssurancePage qualityAssurancePage, AllOpenPositionsPage allOpenPositionsPage) {&#10;        // Navigate to Quality Assurance page&#10;        navigateToQAPage();&#10;&#10;        // Click &quot;See all QA jobs&quot; button&#10;        clickSeeAllQAJobsButton(qualityAssurancePage);&#10;&#10;        // Apply location filter&#10;        applyIstanbulLocationFilter(allOpenPositionsPage);&#10;&#10;        // Verify job list&#10;        verifyJobListPresence(allOpenPositionsPage);&#10;    }&#10;&#10;    private static void navigateToQAPage() {&#10;        logger.info(&quot;Navigating to QA page...&quot;);&#10;        Driver.getDriver().get(ConfigReader.getProperty(&quot;URL&quot;));&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        assertPageURL(&quot;useinsider.com/careers/quality-assurance/&quot;);&#10;        assertPageTitle(ConfigReader.getProperty(&quot;qa.page.title&quot;));&#10;        logger.info(&quot;✓ QA page is successfully opened and verified&quot;);&#10;    }&#10;&#10;    private static void clickSeeAllQAJobsButton(QualityAssurancePage qualityAssurancePage) {&#10;        qualityAssurancePage.seeAllQAJobsButton.click();&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        assertPageURL(ConfigReader.getProperty(&quot;URL2&quot;));&#10;        assertPageTitle(ConfigReader.getProperty(&quot;open.positions.title&quot;));&#10;        logger.info(&quot;✓ 'See all QA jobs' button is clicked and All Open Positions page is successfully opened and verified&quot;);&#10;    }&#10;&#10;    private static void applyIstanbulLocationFilter(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Applying location filter for Istanbul, Turkey...&quot;);&#10;        int defaultWait = Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;));&#10;&#10;        wait(defaultWait);&#10;        allOpenPositionsPage.removeAllItemsFilterByLocationDropdownMenu.click();&#10;        logger.info(&quot;✓ Existing location filters removed&quot;);&#10;&#10;        wait(defaultWait);&#10;        allOpenPositionsPage.filterByLocationDropdownMenu.click();&#10;        wait(defaultWait);&#10;        allOpenPositionsPage.filterByLocationDropdownMenu.click();&#10;        logger.info(&quot;✓ Location dropdown opened&quot;);&#10;&#10;        wait(defaultWait);&#10;        scrollToElement(allOpenPositionsPage.istanbulTurkiye);&#10;        wait(defaultWait);&#10;        allOpenPositionsPage.istanbulTurkiye.click();&#10;        logger.info(&quot;✓ Istanbul, Turkey location selected&quot;);&#10;    }&#10;&#10;    private static void verifyJobListPresence(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Verifying job list is displayed...&quot;);&#10;        scrollToElement(allOpenPositionsPage.jobCard);&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;        assertElementDisplayed(allOpenPositionsPage.jobCard, &quot;Job Card&quot;);&#10;        logger.info(&quot;✓ Jobs are successfully filtered by Location: 'Istanbul, Turkey' and Department: 'Quality Assurance' and job list is displayed&quot;);&#10;    }&#10;&#10;    // Test Case 4: Job details verification&#10;    public static void verifyJobDetailsContent(AllOpenPositionsPage allOpenPositionsPage) {&#10;        // Navigate to Open Positions page and apply filter&#10;        navigateToOpenPositionsAndFilter(allOpenPositionsPage);&#10;&#10;        // Verify job details (recursive call kaldırıldı)&#10;        verifyJobDetailsContentInternal(allOpenPositionsPage);&#10;    }&#10;&#10;    private static void navigateToOpenPositionsAndFilter(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Navigating to All Open Positions page...&quot;);&#10;        Driver.getDriver().get(ConfigReader.getProperty(&quot;URL2&quot;));&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        logger.info(&quot;✓ All Open Positions page loaded&quot;);&#10;&#10;        applyIstanbulLocationFilter(allOpenPositionsPage);&#10;&#10;        logger.info(&quot;Preparing job card for verification...&quot;);&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;        scrollToElement(allOpenPositionsPage.jobCard);&#10;        waitForVisibility(allOpenPositionsPage.jobCard, Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        assertElementDisplayed(allOpenPositionsPage.jobCard, &quot;Job Card&quot;);&#10;        logger.info(&quot;✓ Job card is displayed and ready for verification&quot;);&#10;    }&#10;&#10;    private static void verifyJobDetailsContentInternal(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Verifying job details content...&quot;);&#10;        String qaDepartment = ConfigReader.getProperty(&quot;qa.department&quot;);&#10;&#10;        // Get text content from job details&#10;        String positionText = allOpenPositionsPage.position.getText();&#10;        String departmentText = allOpenPositionsPage.department.getText();&#10;        String locationText = allOpenPositionsPage.location.getText();&#10;&#10;        // Verify Position contains &quot;Quality Assurance&quot;&#10;        Assert.assertTrue(positionText.contains(qaDepartment),&#10;                &quot;Position should contain '&quot; + qaDepartment + &quot;'. Actual: &quot; + positionText);&#10;        logger.info(&quot;✓ Position contains '&quot; + qaDepartment + &quot;': &quot; + positionText);&#10;&#10;        // Verify Department contains &quot;Quality Assurance&quot;&#10;        Assert.assertTrue(departmentText.contains(qaDepartment),&#10;                &quot;Department should contain '&quot; + qaDepartment + &quot;'. Actual: &quot; + departmentText);&#10;        logger.info(&quot;✓ Department contains '&quot; + qaDepartment + &quot;': &quot; + departmentText);&#10;&#10;        // Verify Location contains &quot;Istanbul, Turkiye&quot;&#10;        Assert.assertTrue(locationText.contains(&quot;Istanbul, Turkiye&quot;),&#10;                &quot;Location should contain 'Istanbul, Turkiye'. Actual: &quot; + locationText);&#10;        logger.info(&quot;✓ Location contains 'Istanbul, Turkiye': &quot; + locationText);&#10;&#10;        logger.info(&quot;✓ All job details verified successfully&quot;);&#10;    }&#10;&#10;&#10;    // Test Case 5: Lever application redirect&#10;    public static void verifyLeverApplicationRedirect(AllOpenPositionsPage allOpenPositionsPage, LeverApplicationFormPage leverApplicationFormPage) {&#10;        // Navigate and prepare for View Role button click&#10;        prepareForViewRoleClick(allOpenPositionsPage);&#10;&#10;        // Click View Role and verify redirect&#10;        clickViewRoleAndVerifyRedirect(allOpenPositionsPage, leverApplicationFormPage);&#10;    }&#10;&#10;    private static void prepareForViewRoleClick(AllOpenPositionsPage allOpenPositionsPage) {&#10;        logger.info(&quot;Navigating to All Open Positions page...&quot;);&#10;        Driver.getDriver().get(ConfigReader.getProperty(&quot;URL2&quot;));&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        logger.info(&quot;✓ All Open Positions page loaded&quot;);&#10;&#10;        applyIstanbulLocationFilter(allOpenPositionsPage);&#10;&#10;        logger.info(&quot;Preparing to click View Role button...&quot;);&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;        scrollToElement(allOpenPositionsPage.jobCard);&#10;        hover(allOpenPositionsPage.jobCard);&#10;        logger.info(&quot;✓ Hovered over job card to reveal View Role button&quot;);&#10;&#10;        waitForClickability(allOpenPositionsPage.viewRoleButton, Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;    }&#10;&#10;    private static void clickViewRoleAndVerifyRedirect(AllOpenPositionsPage allOpenPositionsPage, LeverApplicationFormPage leverApplicationFormPage) {&#10;        // Save current window handle&#10;        String originalWindow = Driver.getDriver().getWindowHandle();&#10;        logger.info(&quot;✓ Original window handle saved&quot;);&#10;&#10;        // Click View Role button&#10;        wait(Integer.parseInt(ConfigReader.getProperty(&quot;wait.default&quot;)));&#10;        allOpenPositionsPage.viewRoleButton.click();&#10;        logger.info(&quot;✓ View Role button clicked&quot;);&#10;&#10;        // Switch to new window and verify&#10;        logger.info(&quot;Switching to new window...&quot;);&#10;        switchToNewWindow(originalWindow);&#10;        waitForPageToLoad(Integer.parseInt(ConfigReader.getProperty(&quot;wait.page.load&quot;)));&#10;        logger.info(&quot;✓ Successfully switched to new window&quot;);&#10;&#10;        // Verify Lever Application page&#10;        verifyLeverApplicationPage(leverApplicationFormPage);&#10;    }&#10;&#10;    private static void verifyLeverApplicationPage(LeverApplicationFormPage leverApplicationFormPage) {&#10;        logger.info(&quot;Verifying Lever Application page...&quot;);&#10;        assertPageURL(ConfigReader.getProperty(&quot;lever.url&quot;));&#10;        logger.info(&quot;✓ Lever Application page URL verification successful&quot;);&#10;&#10;        assertElementDisplayed(leverApplicationFormPage.applyForThisJobButton, &quot;Apply for this job button&quot;);&#10;        logger.info(&quot;✓ Apply for this job button is displayed and verified&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>